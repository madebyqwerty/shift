openapi: 3.0.0
info:
  title: Database service API
  version: 0.0.1
  description: This is a REST API for the database service.
  license:
    name: Proprietary
  contact:
    name: Tom치코 Kebrle
servers:
  - url: http://localhost:5000/api

paths:
  "/absences/{userId}":
    get:
      summary: Returns a list of absences for a given user.
      parameters:
        - name: userId
          in: path
          description: ID of the user to get
          required: true
          schema:
            type: string
        
      tags:
        - Absences
      responses:
        "200":
          description: The list of absences.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Absence"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    enum:
                      - required
                      - not-valid
    post:
      summary: Creates a new absence.
      parameters:
        - name: userId
          in: path
          description: ID of the user to post to
          required: true
          schema:
            type: string
      tags:
        - Absences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lesson:
                  type: number
                  example: 3
                date:
                  type: string
                  example: 2023-05-14
      responses:
        "200":
          description: The absence was successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The absence id.
                    example: 7d6fd0c4-6b3d-46d9-9840-5e8874c9c646
                  lesson:
                    type: number
                    description: The lesson number
                    example: 2
                  date:
                    type: string
                    description: Date of the absence
                    example: 2023-05-14
  /users:
    get:
      summary: List of all users
      tags:
        - Users
      responses:
        "200":
          description: The list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    enum:
                      - required
    post:
      summary: Creates a new user.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The user's name.
                  example: Tom치코 Kebrle
      responses:
        "200":
          description: The created user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  fieldErrors:
                    type: object
                    properties:
                      name:
                        type: array
                        items:
                          type: string
                          enum:
                            - required
                    example:
                      name:
                        - required
  "/users/{id}":
    get:
      summary: Returns a user by ID.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: ID of the user to get
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Id is not valid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    enum:
                      - not-valid
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                    enum:
                      - not-found
components:
  schemas:
    Absence:
      type: object
      required:
        - name
        - userId
        - id
        - lesson
        - date
      properties:
        name:
          type: string
          description: The user's name.
        userId:
          type: string
          description: The user's id.
        id:
          type: string
          description: The absence's id.
        lesson:
          type: number
          description: The lesson number
        date:
          type: string
          description: Date of the absence
      example:
        name: John Doe
        userId: 7d6fd0c4-6b3d-46d9-9840-5e8874c9c646
        id: f7cabd53-49e1-4c93-b59e-6035811b134d
        lesson: 2
        date: 2023-05-14
    ErrorCodes:
      type: string
      enum:
        - required
        - not-found
    User:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The user's name.
        id:
          type: string
          description: The user's id.
      example:
        name: John Doe
        id: f7cabd53-49e1-4c93-b59e-6035811b134d
tags:
  - name: Absences
    description: API for managing absences.
  - name: Users
    description: API for managing users.
