/* tslint:disable */
/* eslint-disable */
/**
 * Database service API
 * REST API for interacting with the database service.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Absence,
  AbsencesUserIdGet400Response,
  AbsencesUserIdPost200Response,
  AbsencesUserIdPostRequest,
} from '../models';
import {
    AbsenceFromJSON,
    AbsenceToJSON,
    AbsencesUserIdGet400ResponseFromJSON,
    AbsencesUserIdGet400ResponseToJSON,
    AbsencesUserIdPost200ResponseFromJSON,
    AbsencesUserIdPost200ResponseToJSON,
    AbsencesUserIdPostRequestFromJSON,
    AbsencesUserIdPostRequestToJSON,
} from '../models';

export interface AbsencesUserIdGetRequest {
    userId: string;
}

export interface AbsencesUserIdPostOperationRequest {
    userId: string;
    absencesUserIdPostRequest: AbsencesUserIdPostRequest;
}

/**
 * 
 */
export class AbsencesApi extends runtime.BaseAPI {

    /**
     * Returns a list of absences for a given user.
     */
    async absencesUserIdGetRaw(requestParameters: AbsencesUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Absence>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling absencesUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/absences/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AbsenceFromJSON));
    }

    /**
     * Returns a list of absences for a given user.
     */
    async absencesUserIdGet(requestParameters: AbsencesUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Absence>> {
        const response = await this.absencesUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new absence.
     */
    async absencesUserIdPostRaw(requestParameters: AbsencesUserIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbsencesUserIdPost200Response>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling absencesUserIdPost.');
        }

        if (requestParameters.absencesUserIdPostRequest === null || requestParameters.absencesUserIdPostRequest === undefined) {
            throw new runtime.RequiredError('absencesUserIdPostRequest','Required parameter requestParameters.absencesUserIdPostRequest was null or undefined when calling absencesUserIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/absences/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AbsencesUserIdPostRequestToJSON(requestParameters.absencesUserIdPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AbsencesUserIdPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new absence.
     */
    async absencesUserIdPost(requestParameters: AbsencesUserIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbsencesUserIdPost200Response> {
        const response = await this.absencesUserIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
