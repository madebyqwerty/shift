/* tslint:disable */
/* eslint-disable */
/**
 * Database service API
 * REST API for interacting with the database service.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Absence,
  AbsencesPost200Response,
  AbsencesPostRequest,
} from '../models';
import {
    AbsenceFromJSON,
    AbsenceToJSON,
    AbsencesPost200ResponseFromJSON,
    AbsencesPost200ResponseToJSON,
    AbsencesPostRequestFromJSON,
    AbsencesPostRequestToJSON,
} from '../models';

export interface AbsencesGetRequest {
    userId: string;
}

export interface AbsencesPostOperationRequest {
    userId: string;
    absencesPostRequest: AbsencesPostRequest;
}

/**
 * 
 */
export class AbsencesApi extends runtime.BaseAPI {

    /**
     * List of all absences for a user
     */
    async absencesGetRaw(requestParameters: AbsencesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Absence>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling absencesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/absences`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AbsenceFromJSON));
    }

    /**
     * List of all absences for a user
     */
    async absencesGet(requestParameters: AbsencesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Absence>> {
        const response = await this.absencesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new absence.
     */
    async absencesPostRaw(requestParameters: AbsencesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbsencesPost200Response>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling absencesPost.');
        }

        if (requestParameters.absencesPostRequest === null || requestParameters.absencesPostRequest === undefined) {
            throw new runtime.RequiredError('absencesPostRequest','Required parameter requestParameters.absencesPostRequest was null or undefined when calling absencesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/absences`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AbsencesPostRequestToJSON(requestParameters.absencesPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AbsencesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new absence.
     */
    async absencesPost(requestParameters: AbsencesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbsencesPost200Response> {
        const response = await this.absencesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
