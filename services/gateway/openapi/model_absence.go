/*
Database service API

REST API for interacting with the database service.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Absence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Absence{}

// Absence struct for Absence
type Absence struct {
	// The user's name
	Name string `json:"name"`
	// The user's id
	UserId string `json:"userId"`
	// The absence's id.
	Id string `json:"id"`
	// The lesson number
	Lesson float32 `json:"lesson"`
	// Date of the absence
	Date string `json:"date"`
}

// NewAbsence instantiates a new Absence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbsence(name string, userId string, id string, lesson float32, date string) *Absence {
	this := Absence{}
	this.Name = name
	this.UserId = userId
	this.Id = id
	this.Lesson = lesson
	this.Date = date
	return &this
}

// NewAbsenceWithDefaults instantiates a new Absence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbsenceWithDefaults() *Absence {
	this := Absence{}
	return &this
}

// GetName returns the Name field value
func (o *Absence) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Absence) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Absence) SetName(v string) {
	o.Name = v
}

// GetUserId returns the UserId field value
func (o *Absence) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Absence) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Absence) SetUserId(v string) {
	o.UserId = v
}

// GetId returns the Id field value
func (o *Absence) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Absence) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Absence) SetId(v string) {
	o.Id = v
}

// GetLesson returns the Lesson field value
func (o *Absence) GetLesson() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Lesson
}

// GetLessonOk returns a tuple with the Lesson field value
// and a boolean to check if the value has been set.
func (o *Absence) GetLessonOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lesson, true
}

// SetLesson sets field value
func (o *Absence) SetLesson(v float32) {
	o.Lesson = v
}

// GetDate returns the Date field value
func (o *Absence) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Absence) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Absence) SetDate(v string) {
	o.Date = v
}

func (o Absence) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Absence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["userId"] = o.UserId
	toSerialize["id"] = o.Id
	toSerialize["lesson"] = o.Lesson
	toSerialize["date"] = o.Date
	return toSerialize, nil
}

type NullableAbsence struct {
	value *Absence
	isSet bool
}

func (v NullableAbsence) Get() *Absence {
	return v.value
}

func (v *NullableAbsence) Set(val *Absence) {
	v.value = val
	v.isSet = true
}

func (v NullableAbsence) IsSet() bool {
	return v.isSet
}

func (v *NullableAbsence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbsence(val *Absence) *NullableAbsence {
	return &NullableAbsence{value: val, isSet: true}
}

func (v NullableAbsence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbsence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


