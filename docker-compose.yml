version: "3"
services:
  web:
    container_name: web
    build:
      context: ./
      dockerfile: apps/web/Dockerfile
    restart: always
    ports:
      - 5002:5002

  database-service:
    container_name: database-service
    build: services/database/
    restart: always
    network_mode: "host"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  gateway:
    container_name: gateway
    build: services/gateway/
    restart: always
    network_mode: "host"
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  ocr-service:
    container_name: ocr-service
    build: services/ocr/
    restart: always
    env_file: .env
    network_mode: "host"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  postgres:
    image: postgres:latest
    restart: always
    env_file: .env
    network_mode: "host"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - database_postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    restart: always
    network_mode: "host"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  mongo:
    image: mongo:latest
    restart: always
    network_mode: "host"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 3

  mongo-seed:
    build: ./mongo
    network_mode: "host"
    depends_on:
      mongo:
        condition: service_healthy

volumes:
  database_postgres:
  mongo_data:
