/* tslint:disable */
/* eslint-disable */
/**
 * Database service API
 * REST API for interacting with the database service.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Absences } from './Absences';
import {
    AbsencesFromJSON,
    AbsencesFromJSONTyped,
    AbsencesToJSON,
} from './Absences';

/**
 * 
 * @export
 * @interface ApiAbsenceScanScanIdGet200Response
 */
export interface ApiAbsenceScanScanIdGet200Response {
    /**
     * The id of the absence scan.
     * @type {string}
     * @memberof ApiAbsenceScanScanIdGet200Response
     */
    id?: string;
    /**
     * 
     * @type {Array<Absences>}
     * @memberof ApiAbsenceScanScanIdGet200Response
     */
    absences?: Array<Absences>;
}

/**
 * Check if a given object implements the ApiAbsenceScanScanIdGet200Response interface.
 */
export function instanceOfApiAbsenceScanScanIdGet200Response(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApiAbsenceScanScanIdGet200ResponseFromJSON(json: any): ApiAbsenceScanScanIdGet200Response {
    return ApiAbsenceScanScanIdGet200ResponseFromJSONTyped(json, false);
}

export function ApiAbsenceScanScanIdGet200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiAbsenceScanScanIdGet200Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'absences': !exists(json, 'absences') ? undefined : ((json['absences'] as Array<any>).map(AbsencesFromJSON)),
    };
}

export function ApiAbsenceScanScanIdGet200ResponseToJSON(value?: ApiAbsenceScanScanIdGet200Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'absences': value.absences === undefined ? undefined : ((value.absences as Array<any>).map(AbsencesToJSON)),
    };
}

