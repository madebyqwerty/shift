/*
Database service API

REST API for interacting with the database service.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiAbsencesUserIdPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiAbsencesUserIdPost200Response{}

// ApiAbsencesUserIdPost200Response struct for ApiAbsencesUserIdPost200Response
type ApiAbsencesUserIdPost200Response struct {
	// The absence id.
	Id *string `json:"id,omitempty"`
	// The lesson number
	Lesson *float32 `json:"lesson,omitempty"`
	// Date of the absence
	Date *string `json:"date,omitempty"`
}

// NewApiAbsencesUserIdPost200Response instantiates a new ApiAbsencesUserIdPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAbsencesUserIdPost200Response() *ApiAbsencesUserIdPost200Response {
	this := ApiAbsencesUserIdPost200Response{}
	return &this
}

// NewApiAbsencesUserIdPost200ResponseWithDefaults instantiates a new ApiAbsencesUserIdPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAbsencesUserIdPost200ResponseWithDefaults() *ApiAbsencesUserIdPost200Response {
	this := ApiAbsencesUserIdPost200Response{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiAbsencesUserIdPost200Response) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAbsencesUserIdPost200Response) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiAbsencesUserIdPost200Response) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiAbsencesUserIdPost200Response) SetId(v string) {
	o.Id = &v
}

// GetLesson returns the Lesson field value if set, zero value otherwise.
func (o *ApiAbsencesUserIdPost200Response) GetLesson() float32 {
	if o == nil || IsNil(o.Lesson) {
		var ret float32
		return ret
	}
	return *o.Lesson
}

// GetLessonOk returns a tuple with the Lesson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAbsencesUserIdPost200Response) GetLessonOk() (*float32, bool) {
	if o == nil || IsNil(o.Lesson) {
		return nil, false
	}
	return o.Lesson, true
}

// HasLesson returns a boolean if a field has been set.
func (o *ApiAbsencesUserIdPost200Response) HasLesson() bool {
	if o != nil && !IsNil(o.Lesson) {
		return true
	}

	return false
}

// SetLesson gets a reference to the given float32 and assigns it to the Lesson field.
func (o *ApiAbsencesUserIdPost200Response) SetLesson(v float32) {
	o.Lesson = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ApiAbsencesUserIdPost200Response) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAbsencesUserIdPost200Response) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ApiAbsencesUserIdPost200Response) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ApiAbsencesUserIdPost200Response) SetDate(v string) {
	o.Date = &v
}

func (o ApiAbsencesUserIdPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiAbsencesUserIdPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Lesson) {
		toSerialize["lesson"] = o.Lesson
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	return toSerialize, nil
}

type NullableApiAbsencesUserIdPost200Response struct {
	value *ApiAbsencesUserIdPost200Response
	isSet bool
}

func (v NullableApiAbsencesUserIdPost200Response) Get() *ApiAbsencesUserIdPost200Response {
	return v.value
}

func (v *NullableApiAbsencesUserIdPost200Response) Set(val *ApiAbsencesUserIdPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAbsencesUserIdPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAbsencesUserIdPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAbsencesUserIdPost200Response(val *ApiAbsencesUserIdPost200Response) *NullableApiAbsencesUserIdPost200Response {
	return &NullableApiAbsencesUserIdPost200Response{value: val, isSet: true}
}

func (v NullableApiAbsencesUserIdPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAbsencesUserIdPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


