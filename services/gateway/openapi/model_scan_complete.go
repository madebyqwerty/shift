/*
Database service API

REST API for interacting with the database service.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScanComplete type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScanComplete{}

// ScanComplete struct for ScanComplete
type ScanComplete struct {
	Absences []ScanCompleteAbsencesInner `json:"absences,omitempty"`
}

// NewScanComplete instantiates a new ScanComplete object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanComplete() *ScanComplete {
	this := ScanComplete{}
	return &this
}

// NewScanCompleteWithDefaults instantiates a new ScanComplete object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanCompleteWithDefaults() *ScanComplete {
	this := ScanComplete{}
	return &this
}

// GetAbsences returns the Absences field value if set, zero value otherwise.
func (o *ScanComplete) GetAbsences() []ScanCompleteAbsencesInner {
	if o == nil || IsNil(o.Absences) {
		var ret []ScanCompleteAbsencesInner
		return ret
	}
	return o.Absences
}

// GetAbsencesOk returns a tuple with the Absences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanComplete) GetAbsencesOk() ([]ScanCompleteAbsencesInner, bool) {
	if o == nil || IsNil(o.Absences) {
		return nil, false
	}
	return o.Absences, true
}

// HasAbsences returns a boolean if a field has been set.
func (o *ScanComplete) HasAbsences() bool {
	if o != nil && !IsNil(o.Absences) {
		return true
	}

	return false
}

// SetAbsences gets a reference to the given []ScanCompleteAbsencesInner and assigns it to the Absences field.
func (o *ScanComplete) SetAbsences(v []ScanCompleteAbsencesInner) {
	o.Absences = v
}

func (o ScanComplete) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScanComplete) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Absences) {
		toSerialize["absences"] = o.Absences
	}
	return toSerialize, nil
}

type NullableScanComplete struct {
	value *ScanComplete
	isSet bool
}

func (v NullableScanComplete) Get() *ScanComplete {
	return v.value
}

func (v *NullableScanComplete) Set(val *ScanComplete) {
	v.value = val
	v.isSet = true
}

func (v NullableScanComplete) IsSet() bool {
	return v.isSet
}

func (v *NullableScanComplete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanComplete(val *ScanComplete) *NullableScanComplete {
	return &NullableScanComplete{value: val, isSet: true}
}

func (v NullableScanComplete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanComplete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


